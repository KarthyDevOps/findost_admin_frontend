{"version":3,"sources":["component/common/TableComp/TableComp.js","assets/images/deleteIcon.svg","assets/images/editIcon.svg","assets/images/ReadImg.svg","assets/images/viewIcon.svg","../node_modules/antd/es/_util/reactNode.js"],"names":["TableComp","props","data","EditAction","DeleteAction","ReadAction","includedKeys","pageCount","onPageChange","editRouteName","setCurrentPage","handleOpenModal","currentPage","onRowsSelect","calmanagement","management","client","isIpo","isPagination","selectedRows","setSelectedRows","useState","statusColors","active","inactive","open","accepted","inprogress","closed","failed","success","PENDING","COMPLETED","React","createElement","className","type","onChange","handleSelectAll","updatedRows","length","map","obj","_id","checked","key","Fragment","style","width","label","id","rowId","includes","filter","handleRowSelect","item","value","getValueForKey","nestedKeys","split","nestedKey","hasOwnProperty","moment","isValid","format","statusKey","toLowerCase","status","color","charAt","toUpperCase","slice","Tooltip","title","href","target","src","alt","test","textOnlyValue","replace","editIcon","cursor","onClick","localStorage","removeItem","setItem","familyMember","JSON","stringify","history","push","concat","viewIcon","ReadImg","deleteIcon","console","log","ReactPaginate","previousLabel","FaCaretLeft","nextLabel","FaCaretRight","selectedPage","selected","forcePage","containerClassName","previousClassName","nextClassName","pageClassName","breakClassName","activeClassName","module","exports","isValidElement","isFragment","child","cloneElement","element","replacement","replaceElement"],"mappings":"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","file":"static/js/111.f784ad03.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// styles\r\nimport \"./style.scss\";\r\n// images\r\nimport editIcon from \"assets/images/editIcon.svg\";\r\nimport deleteIcon from \"assets/images/deleteIcon.svg\";\r\nimport ReadImg from \"assets/images/ReadImg.svg\";\r\nimport viewIcon from \"assets/images/viewIcon.svg\";\r\n// services\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\r\nimport { Tooltip } from \"antd\";\r\nimport moment from \"moment\";\r\n// helpers\r\nimport { history } from \"helpers\";\r\n\r\nfunction TableComp(props) {\r\n  const {\r\n    data,\r\n    EditAction,\r\n    DeleteAction,\r\n    ReadAction,\r\n    includedKeys,\r\n    pageCount,\r\n    onPageChange,\r\n    editRouteName,\r\n    setCurrentPage,\r\n    handleOpenModal,\r\n    currentPage,\r\n    onRowsSelect,\r\n    calmanagement = false,\r\n    management = false,\r\n    client = false,\r\n    isIpo,\r\n    isPagination\r\n  } = props;\r\n\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  // Dynamic colors for Status KeyName\r\n  const statusColors = {\r\n    active: \"#27AE60\",\r\n    inactive: \"#EB5757\",\r\n    open: \"#EB5757\",\r\n    accepted: \"#2F80ED\",\r\n    inprogress: \"#F2C94C\",\r\n    closed: \"#27AE60\",\r\n    failed: \"#EB5757\",\r\n    success: \"#27AE60\",\r\n    PENDING: \"#EB5757\",\r\n    COMPLETED: \"#27AE60\",\r\n  };\r\n\r\n  const handlePageChange = (selectedPage) => {\r\n    setCurrentPage(selectedPage.selected + 1);\r\n    onPageChange(selectedPage.selected + 1);\r\n  };\r\n\r\n  const handleRowSelect = (rowId) => {\r\n    let updatedRows;\r\n    if (selectedRows.includes(rowId)) {\r\n      updatedRows = selectedRows.filter((id) => id !== rowId);\r\n    } else {\r\n      updatedRows = [...selectedRows, rowId];\r\n    }\r\n    setSelectedRows(updatedRows);\r\n    onRowsSelect(updatedRows);\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    let updatedRows;\r\n    if (selectedRows.length === data.length) {\r\n      updatedRows = [];\r\n    } else {\r\n      const allRowIds = data.map((obj) => obj._id);\r\n      updatedRows = allRowIds;\r\n    }\r\n    setSelectedRows(updatedRows);\r\n    onRowsSelect(updatedRows);\r\n  };\r\n\r\n  const getValueForKey = (key, obj) => {\r\n    const nestedKeys = key.split(\".\");\r\n    let value = obj;\r\n    for (const nestedKey of nestedKeys) {\r\n      if (value.hasOwnProperty(nestedKey)) {\r\n        value = value[nestedKey];\r\n      } else {\r\n        return (value = \"-\");\r\n      }\r\n    }\r\n    if (\r\n      nestedKeys.includes(\"familyMember\") &&\r\n      typeof value === \"string\" &&\r\n      moment(value, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid()\r\n    ) {\r\n      return moment(value).format(\"MMM DD YYYY\");\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table className=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            {DeleteAction && (\r\n              <th className=\"checkBox_place\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={handleSelectAll}\r\n                  checked={selectedRows.length === data.length}\r\n                  className=\"check_box cursor-pointer\"\r\n                />\r\n              </th>\r\n            )}\r\n            {includedKeys.map((key) => {\r\n              return (\r\n                <>\r\n                  <th\r\n                    className=\"\"\r\n                    key={key}\r\n                    style={{ ...(key?.width ? { width: key?.width } : {}) }}\r\n                  >\r\n                    {key.label}\r\n                  </th>\r\n                </>\r\n              );\r\n            })}\r\n\r\n            {(DeleteAction || ReadAction || EditAction) && (\r\n              <th className=\"action_place\"> Actions</th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {data.map((obj) => {\r\n            return (\r\n              <tr key={obj.id}>\r\n                {DeleteAction && (\r\n                  <td className=\"checkBox_place\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      onChange={() => handleRowSelect(obj._id)}\r\n                      checked={selectedRows.includes(obj._id)}\r\n                      className=\"check_box cursor-pointer\"\r\n                    />\r\n                  </td>\r\n                )}\r\n                {includedKeys.map((item) => {\r\n                  const key = item.value;\r\n                  const value = getValueForKey(key, obj);\r\n                  // status keys color change\r\n                  if (obj.hasOwnProperty(key)) {\r\n                    const value = obj[key];\r\n                    const label = item.label;\r\n                    const statusKey = key.toLowerCase();\r\n                    if (statusKey.includes(\"status\")) {\r\n                      const status = value.toLowerCase();\r\n                      const color = statusColors[status] || \"black\";\r\n                      return (\r\n                        <td key={key}>\r\n                          <span style={{ color }}>\r\n                            {value.charAt(0).toUpperCase() + value.slice(1)}\r\n                          </span>\r\n                        </td>\r\n                      );\r\n                      // for id\r\n                    } else if (statusKey.includes(\"aditionalinfo\")) {\r\n                      return (\r\n                        <Tooltip title={value} color={\"#fff\"} key={\"#fff\"}>\r\n                          <td key={key}>{value}</td>\r\n                        </Tooltip>\r\n                      );\r\n                    } else if (statusKey.includes(\"id\")) {\r\n                      return <td key={key}>{value}</td>;\r\n                    } else if (\r\n                      calmanagement &&\r\n                      statusKey.includes(\"description\")\r\n                    ) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            {value}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"type\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"producticons3\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            <img src={value} alt={value} className=\"img\" />{\" \"}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"imageurls3\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            <img src={value} alt={value} className=\"img\" />{\" \"}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                      // date formatter\r\n                    } else if (statusKey === \"date\") {\r\n                      return (\r\n                        <td key={key}>{moment(value).format(\"MMM DD YYYY\")}</td>\r\n                      );\r\n                      // date and time formatter\r\n                    } else if (\r\n                      moment(value, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid()\r\n                    ) {\r\n                      return (\r\n                        <td key={key}>\r\n                          {moment(value).format(\"MMM DD YYYY hh:mm a\")}\r\n                        </td>\r\n                      );\r\n                    } else if (\r\n                      typeof value === \"string\" &&\r\n                      /<[a-z][\\s\\S]*>/i.test(value)\r\n                    ) {\r\n                      const textOnlyValue = value.replace(/<[^>]+>/g, \"\");\r\n                      return <td key={key}>{textOnlyValue}</td>;\r\n                      // for boolean\r\n                    } else {\r\n                      return (\r\n                        <td key={key}>\r\n                          {typeof value === \"boolean\" ? (\r\n                            value ? (\r\n                              <span style={{ color: \"#1D9E00\" }}>Active</span>\r\n                            ) : (\r\n                              <span style={{ color: \"#DD2025\" }}>Inactive</span>\r\n                            )\r\n                          ) : (\r\n                            value\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    }\r\n                  }\r\n                  return <td key={key}>{value}</td>;\r\n                })}\r\n                {(DeleteAction || ReadAction || EditAction) && (\r\n                  <td>\r\n                    <span className=\"actions\">\r\n                      {EditAction && (\r\n                        <img\r\n                          src={editIcon}\r\n                          alt=\"Edit\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            localStorage.removeItem(\"editId\");\r\n                            localStorage.setItem(\"editId\", obj._id);\r\n                            {\r\n                              client &&\r\n                                localStorage.setItem(\r\n                                  \"clientId\",\r\n                                  obj.familyMember._id\r\n                                );\r\n                            }\r\n                            {\r\n                              isIpo && localStorage.setItem(\"ipoId\", JSON.stringify(obj));\r\n                            }\r\n                            localStorage.removeItem(\"editPage\");\r\n                            localStorage.setItem(\"editPage\", currentPage ? currentPage : 1);\r\n                            history.push(`${editRouteName}`);\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {ReadAction && (\r\n                        <img\r\n                          src={management ? viewIcon : ReadImg}\r\n                          alt=\"read\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            localStorage.removeItem(\"viewId\");\r\n                            localStorage.setItem(\"viewId\", obj._id);\r\n                            history.push(`${editRouteName}`);\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {!management && DeleteAction && (\r\n                        <img\r\n                          onClick={() => handleOpenModal(obj._id)}\r\n                          src={deleteIcon}\r\n                          alt=\"delete\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                        />\r\n                      )}\r\n                    </span>\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        {console.log(management, \"mana\")}\r\n      </table>\r\n      {isPagination ? (\r\n        <></>\r\n      ) : (\r\n        <div className=\"my-4\">\r\n          <ReactPaginate\r\n            previousLabel={<FaCaretLeft />}\r\n            nextLabel={<FaCaretRight />}\r\n            pageCount={pageCount}\r\n            onPageChange={handlePageChange}\r\n            forcePage={currentPage - 1}\r\n            containerClassName={\"pagination\"}\r\n            previousClassName={\"pagination-previous\"}\r\n            nextClassName={\"pagination-next\"}\r\n            pageClassName={\"pagination-item\"}\r\n            breakClassName={\"pagination-item\"}\r\n            activeClassName={\"active_page\"}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableComp;\r\n","module.exports = __webpack_public_path__ + \"static/media/deleteIcon.b8b189cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/editIcon.d54ed3bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/ReadImg.96474dd0.svg\";","module.exports = __webpack_public_path__ + \"static/media/viewIcon.02c0b4b2.svg\";","import * as React from 'react';\nvar isValidElement = React.isValidElement;\nexport { isValidElement };\nexport function isFragment(child) {\n  return child && isValidElement(child) && child.type === React.Fragment;\n}\nexport function replaceElement(element, replacement, props) {\n  if (!isValidElement(element)) {\n    return replacement;\n  }\n  return /*#__PURE__*/React.cloneElement(element, typeof props === 'function' ? props(element.props || {}) : props);\n}\nexport function cloneElement(element, props) {\n  return replaceElement(element, element, props);\n}"],"sourceRoot":""}