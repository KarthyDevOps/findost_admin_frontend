{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","async","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","watchField","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","useFormContext","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","meta","invalid","Controller","props","as","render","rest","componentProps","React.cloneElement","React.createElement"],"mappings":"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","file":"static/js/2.431912ff.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n"],"sourceRoot":""}