{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","useFormContext","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","onBlur","onChange","meta","invalid","Controller","props","as","render","rest","componentProps","React.cloneElement","React.createElement","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","_createForOfIteratorHelper","o","i","F","s","n","done","_e","f","it","err","normalCompletion","didErr","step","next","_e2"],"mappings":"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","file":"static/js/2.19cfd635.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}