{"version":3,"sources":["component/common/DropDown/DropDown.js","../node_modules/@babel/runtime/helpers/esm/inherits.js"],"names":["DropDown","props","value","onChange","options","placeholder","colourStyles","dropdownIndicator","styles","color","isClearable","components","IndicatorSeparator","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","writable","configurable","defineProperty"],"mappings":"wJA6BeA,UAzBE,SAACC,GAChB,IAAQC,EAA0CD,EAA1CC,MAAOC,EAAmCF,EAAnCE,SAAUC,EAAyBH,EAAzBG,QAASC,EAAgBJ,EAAhBI,YAE5BC,EAAe,CACnBC,kBAAmB,SAACC,GAAM,kCACrBA,GAAM,IACTC,MAAO,cAIX,OACE,kBAAC,IAAW,CACVP,MAAOA,EACPC,SAAUA,EACVC,QAASA,EACTM,aAAW,EACXC,WAAY,CACVC,mBAAoB,kBAAM,OAE5BJ,OAAQF,EACRD,YAAaA,M,uDCxBnB,+CACe,SAASQ,EAAUC,EAAUC,GAC1C,GAA0B,oBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIC,UAAU,sDAEtBF,EAASG,UAAYC,OAAOC,OAAOJ,GAAcA,EAAWE,UAAW,CACrEG,YAAa,CACXlB,MAAOY,EACPO,UAAU,EACVC,cAAc,KAGlBJ,OAAOK,eAAeT,EAAU,YAAa,CAC3CO,UAAU,IAERN,GAAY,YAAeD,EAAUC","file":"static/js/95.6145b836.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactSelect from \"react-select\";\r\nimport \"./style.scss\";\r\n\r\nconst DropDown = (props) => {\r\n  const { value, onChange, options, placeholder } = props;\r\n\r\n  const colourStyles = {\r\n    dropdownIndicator: (styles) => ({\r\n      ...styles,\r\n      color: \"#000000\",\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <ReactSelect\r\n      value={value}\r\n      onChange={onChange}\r\n      options={options}\r\n      isClearable\r\n      components={{\r\n        IndicatorSeparator: () => null,\r\n      }}\r\n      styles={colourStyles}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DropDown;\r\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}"],"sourceRoot":""}