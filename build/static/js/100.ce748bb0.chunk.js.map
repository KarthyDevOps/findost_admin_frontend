{"version":3,"sources":["component/common/TableComp/TableComp.js","assets/images/ReadImg.svg","assets/images/deleteIcon.svg","assets/images/editIcon.svg"],"names":["TableComp","props","data","EditAction","DeleteAction","ReadAction","includedKeys","pageCount","onPageChange","editRouteName","setCurrentPage","handleOpenModal","currentPage","onRowsSelect","management","useState","selectedRows","setSelectedRows","statusColors","active","inactive","open","accepted","inprogress","closed","failed","success","PENDING","COMPLETED","className","type","onChange","updatedRows","length","map","obj","_id","checked","key","style","width","label","id","rowId","includes","filter","handleRowSelect","item","value","nestedKeys","split","nestedKey","hasOwnProperty","getValueForKey","console","log","statusKey","toLowerCase","status","color","charAt","toUpperCase","slice","href","target","src","alt","moment","format","isValid","test","textOnlyValue","replace","editIcon","cursor","onClick","localStorage","removeItem","setItem","history","push","ReadImg","deleteIcon","previousLabel","nextLabel","selectedPage","selected","forcePage","containerClassName","previousClassName","nextClassName","pageClassName","breakClassName","activeClassName","module","exports"],"mappings":"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","file":"static/js/100.ce748bb0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// styles\r\nimport \"./style.scss\";\r\n// images\r\nimport editIcon from \"assets/images/editIcon.svg\";\r\nimport deleteIcon from \"assets/images/deleteIcon.svg\";\r\nimport ReadImg from \"assets/images/ReadImg.svg\";\r\n// services\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\r\nimport moment from \"moment\";\r\n// helpers\r\nimport { history } from \"helpers\";\r\n\r\nfunction TableComp(props) {\r\n  const {\r\n    data,\r\n    EditAction,\r\n    DeleteAction,\r\n    ReadAction,\r\n    includedKeys,\r\n    pageCount,\r\n    onPageChange,\r\n    editRouteName,\r\n    setCurrentPage,\r\n    handleOpenModal,\r\n    currentPage,\r\n    onRowsSelect,\r\n    management = false,\r\n  } = props;\r\n\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  // Dynamic colors for Status KeyName\r\n  const statusColors = {\r\n    active: \"#27AE60\",\r\n    inactive: \"#EB5757\",\r\n    open: \"#EB5757\",\r\n    accepted: \"#2F80ED\",\r\n    inprogress: \"#F2C94C\",\r\n    closed: \"#27AE60\",\r\n    failed: \"#EB5757\",\r\n    success: \"#27AE60\",\r\n    PENDING : \"#EB5757\",\r\n    COMPLETED : \"#27AE60\",\r\n  };\r\n\r\n  const handlePageChange = (selectedPage) => {\r\n    setCurrentPage(selectedPage.selected + 1);\r\n    onPageChange(selectedPage.selected + 1);\r\n  };\r\n\r\n  const handleRowSelect = (rowId) => {\r\n    let updatedRows;\r\n    if (selectedRows.includes(rowId)) {\r\n      updatedRows = selectedRows.filter((id) => id !== rowId);\r\n    } else {\r\n      updatedRows = [...selectedRows, rowId];\r\n    }\r\n    setSelectedRows(updatedRows);\r\n    onRowsSelect(updatedRows);\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    let updatedRows;\r\n    if (selectedRows.length === data.length) {\r\n      updatedRows = [];\r\n    } else {\r\n      const allRowIds = data.map((obj) => obj._id);\r\n      updatedRows = allRowIds;\r\n    }\r\n    setSelectedRows(updatedRows);\r\n    onRowsSelect(updatedRows);\r\n  };\r\n\r\n  // const getValueForKey = (key, obj) => {\r\n  //   if(key.split(\".\").length > 1){\r\n  //     const value =  obj[key.split(\".\")[0]] ?  obj[key.split(\".\")[0]][key.split(\".\")[1]] : \"-\";\r\n  //     return value;\r\n  //   }\r\n  //   if (obj.hasOwnProperty(key)) {\r\n  //     const value = obj[key];\r\n  //     return value;\r\n  //   } else {\r\n  //     return \"-\";\r\n  //   }\r\n  // };\r\n\r\n  const getValueForKey = (key, obj) => {\r\n    const nestedKeys = key.split(\".\");\r\n    let value = obj;\r\n    for (const nestedKey of nestedKeys) {\r\n      if (value.hasOwnProperty(nestedKey)) {\r\n        value = value[nestedKey];\r\n      } else {\r\n       return value = \"-\";\r\n      }\r\n    }\r\n    return value;\r\n  };\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table className=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            {DeleteAction && (\r\n              <th className=\"checkBox_place\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={handleSelectAll}\r\n                  checked={selectedRows.length === data.length}\r\n                  className=\"check_box cursor-pointer\"\r\n                />\r\n              </th>\r\n            )}\r\n            {includedKeys.map((key) => {\r\n              return (\r\n                <>\r\n                  <th\r\n                    className=\"\"\r\n                    key={key}\r\n                    style={{ ...(key?.width ? { width: key?.width } : {}) }}\r\n                  >\r\n                    {key.label}\r\n                  </th>\r\n                </>\r\n              );\r\n            })}\r\n\r\n            {(DeleteAction || ReadAction || EditAction) && (\r\n              <th className=\"action_place\"> Actions</th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {data.map((obj) => {\r\n            return (\r\n              <tr key={obj.id}>\r\n                {DeleteAction && (\r\n                  <td className=\"checkBox_place\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      onChange={() => handleRowSelect(obj._id)}\r\n                      checked={selectedRows.includes(obj._id)}\r\n                      className=\"check_box cursor-pointer\"\r\n                    />\r\n                  </td>\r\n                )}\r\n                {includedKeys.map((item) => {\r\n                  const key = item.value;\r\n                  const value = getValueForKey(key, obj);\r\n                  // status keys color change\r\n                  if (obj.hasOwnProperty(key)) {\r\n                    const value = obj[key];\r\n                    const label = item.label;\r\n                    console.log('label :>> ', label);\r\n                    const statusKey = key.toLowerCase();\r\n                    if (statusKey.includes(\"status\")) {\r\n                      const status = value.toLowerCase();\r\n                      const color = statusColors[status] || \"black\";\r\n                      return (\r\n                        <td key={key}>\r\n                          <span style={{ color }}>\r\n                            {value.charAt(0).toUpperCase() + value.slice(1)}\r\n                          </span>\r\n                        </td>\r\n                      );\r\n                    }  else if (statusKey.includes(\"id\")) {\r\n                      return <td key={key}>{value}</td>;\r\n                    } else if (\r\n                      management &&\r\n                      statusKey.includes(\"description\")\r\n                    ) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            {value}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"type\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"producticons3\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            <img src={value} alt={value} className=\"img\" />{\" \"}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"imageurls3\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            <img src={value} alt={value} className=\"img\" />{\" \"}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                      // date formatter\r\n                    } else if (statusKey === \"date\") {\r\n                      return (\r\n                        <td key={key}>{moment(value).format(\"MMM DD YYYY\")}</td>\r\n                      );\r\n                      // date and time formatter\r\n                    } else if (\r\n                      moment(value, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid()\r\n                    ) {\r\n                      return (\r\n                        <td key={key}>\r\n                          {moment(value).format(\"MMM DD YYYY hh:mm a\")}\r\n                        </td>\r\n                      );\r\n                    } else if (\r\n                      typeof value === \"string\" &&\r\n                      /<[a-z][\\s\\S]*>/i.test(value)\r\n                    ) {\r\n                      const textOnlyValue = value.replace(/<[^>]+>/g, \"\");\r\n                      return <td key={key}>{textOnlyValue}</td>;\r\n                      // for boolean\r\n                    } else {\r\n                      return (\r\n                        <td key={key}>\r\n                          {typeof value === \"boolean\" ? (\r\n                            value ? (\r\n                              <span style={{ color: \"#1D9E00\" }}>Active</span>\r\n                            ) : (\r\n                              <span style={{ color: \"#DD2025\" }}>Inactive</span>\r\n                            )\r\n                          ) : (\r\n                            value\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    }\r\n                  }\r\n                  return <td key={key}>{value}</td>;\r\n                })}\r\n\r\n                {(DeleteAction || ReadAction || EditAction) && (\r\n                  <td>\r\n                    <span className=\"actions\">\r\n                      {EditAction && (\r\n                        <img\r\n                          src={editIcon}\r\n                          alt=\"Edit\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            localStorage.removeItem(\"editId\");\r\n                            localStorage.setItem(\"editId\", obj._id);\r\n                            localStorage.removeItem(\"editPage\");\r\n                            localStorage.setItem(\"editPage\", currentPage);\r\n                            history.push(`${editRouteName}`);\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {ReadAction && (\r\n                        <img\r\n                          src={ReadImg}\r\n                          alt=\"read\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            localStorage.removeItem(\"editId\");\r\n                            localStorage.setItem(\"editId\", obj._id);\r\n                            history.push(`${editRouteName}`);\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {DeleteAction && (\r\n                        <img\r\n                          onClick={() => handleOpenModal(obj._id)}\r\n                          src={deleteIcon}\r\n                          alt=\"delete\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                        />\r\n                      )}\r\n                    </span>\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"my-4\">\r\n        <ReactPaginate\r\n          previousLabel={<FaCaretLeft />}\r\n          nextLabel={<FaCaretRight />}\r\n          pageCount={pageCount}\r\n          onPageChange={handlePageChange}\r\n          forcePage={currentPage - 1}\r\n          containerClassName={\"pagination\"}\r\n          previousClassName={\"pagination-previous\"}\r\n          nextClassName={\"pagination-next\"}\r\n          pageClassName={\"pagination-item\"}\r\n          breakClassName={\"pagination-item\"}\r\n          activeClassName={\"active_page\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableComp;\r\n","module.exports = __webpack_public_path__ + \"static/media/ReadImg.96474dd0.svg\";","module.exports = __webpack_public_path__ + \"static/media/deleteIcon.b8b189cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/editIcon.d54ed3bb.svg\";"],"sourceRoot":""}