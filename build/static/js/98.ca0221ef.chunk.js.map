{"version":3,"sources":["component/common/TableComp/TableComp.js","assets/images/ReadImg.svg","assets/images/deleteIcon.svg","assets/images/editIcon.svg"],"names":["TableComp","props","data","EditAction","DeleteAction","ReadAction","includedKeys","pageCount","onPageChange","editRouteName","setCurrentPage","handleOpenModal","currentPage","onRowsSelect","useState","selectedRows","setSelectedRows","statusColors","active","inactive","open","accepted","inprogress","closed","failed","success","className","type","onChange","updatedRows","length","map","obj","_id","checked","key","style","width","label","id","rowId","includes","filter","handleRowSelect","item","value","hasOwnProperty","getValueForKey","statusKey","toLowerCase","status","color","charAt","toUpperCase","slice","href","target","src","alt","moment","format","isValid","test","textOnlyValue","replace","editIcon","cursor","onClick","localStorage","removeItem","setItem","history","push","ReadImg","deleteIcon","previousLabel","nextLabel","selectedPage","selected","forcePage","containerClassName","previousClassName","nextClassName","pageClassName","breakClassName","activeClassName","module","exports"],"mappings":"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","file":"static/js/98.ca0221ef.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// styles\r\nimport \"./style.scss\";\r\n// images\r\nimport editIcon from \"assets/images/editIcon.svg\";\r\nimport deleteIcon from \"assets/images/deleteIcon.svg\";\r\nimport ReadImg from \"assets/images/ReadImg.svg\";\r\n// services\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\r\nimport moment from \"moment\";\r\n// helpers\r\nimport { history } from \"helpers\";\r\n\r\nfunction TableComp(props) {\r\n  const {\r\n    data,\r\n    EditAction,\r\n    DeleteAction,\r\n    ReadAction,\r\n    includedKeys,\r\n    pageCount,\r\n    onPageChange,\r\n    editRouteName,\r\n    setCurrentPage,\r\n    handleOpenModal,\r\n    currentPage,\r\n    onRowsSelect,\r\n  } = props;\r\n\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  // Dynamic colors for Status KeyName\r\n  const statusColors = {\r\n    active: \"#27AE60\",\r\n    inactive: \"#EB5757\",\r\n    open: \"#EB5757\",\r\n    accepted: \"#2F80ED\",\r\n    inprogress: \"#F2C94C\",\r\n    closed: \"#27AE60\",\r\n    failed: \"#EB5757\",\r\n    success: \"#27AE60\",\r\n  };\r\n\r\n  const handlePageChange = (selectedPage) => {\r\n    setCurrentPage(selectedPage.selected + 1);\r\n    onPageChange(selectedPage.selected + 1);\r\n  };\r\n\r\n  const handleRowSelect = (rowId) => {\r\n    let updatedRows;\r\n    if (selectedRows.includes(rowId)) {\r\n      updatedRows = selectedRows.filter((id) => id !== rowId);\r\n    } else {\r\n      updatedRows = [...selectedRows, rowId];\r\n    }\r\n    setSelectedRows(updatedRows);\r\n    onRowsSelect(updatedRows);\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    let updatedRows;\r\n    if (selectedRows.length === data.length) {\r\n      updatedRows = [];\r\n    } else {\r\n      const allRowIds = data.map((obj) => obj._id);\r\n      updatedRows = allRowIds;\r\n    }\r\n    setSelectedRows(updatedRows);\r\n    onRowsSelect(updatedRows);\r\n  };\r\n\r\n  const getValueForKey = (key, obj) => {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const value = obj[key];\r\n      return value;\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table className=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            {DeleteAction && (\r\n              <th className=\"checkBox_place\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={handleSelectAll}\r\n                  checked={selectedRows.length === data.length}\r\n                  className=\"check_box cursor-pointer\"\r\n                />\r\n              </th>\r\n            )}\r\n            {includedKeys.map((key) => {\r\n              return (\r\n                <>\r\n                  <th\r\n                    className=\"\"\r\n                    key={key}\r\n                    style={{ ...(key?.width ? { width: key?.width } : {}) }}\r\n                  >\r\n                    {key.label}\r\n                  </th>\r\n                </>\r\n              );\r\n            })}\r\n\r\n            {(DeleteAction || ReadAction || EditAction) && (\r\n              <th className=\"action_place\"> Actions</th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {data.map((obj) => {\r\n            return (\r\n              <tr key={obj.id}>\r\n                {DeleteAction && (\r\n                  <td className=\"checkBox_place\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      onChange={() => handleRowSelect(obj._id)}\r\n                      checked={selectedRows.includes(obj._id)}\r\n                      className=\"check_box cursor-pointer\"\r\n                    />\r\n                  </td>\r\n                )}\r\n                {includedKeys.map((item) => {\r\n                  const key = item.value;\r\n                  const value = getValueForKey(key, obj);\r\n                  // status keys color change\r\n                  if (obj.hasOwnProperty(key)) {\r\n                    const value = obj[key];\r\n                    const label = item.label;\r\n                    const statusKey = key.toLowerCase();\r\n                    if (statusKey.includes(\"status\")) {\r\n                      const status = value.toLowerCase();\r\n                      const color = statusColors[status] || \"black\";\r\n                      return (\r\n                        <td key={key}>\r\n                          <span style={{ color }}>\r\n                            {value.charAt(0).toUpperCase() + value.slice(1)}\r\n                          </span>\r\n                        </td>\r\n                      );\r\n                      // for id\r\n                    } else if (statusKey.includes(\"id\")) {\r\n                      return <td key={key}>{value}</td>;\r\n                    } else if (statusKey.includes(\"type\")) {\r\n                      return <td key={key}>{value.charAt(0).toUpperCase() + value.slice(1)}</td>;\r\n                    }else if (statusKey.includes(\"producticons3\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            <img src={value} alt={value} className=\"img\" />{\" \"}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                    } else if (statusKey.includes(\"imageurls3\")) {\r\n                      return (\r\n                        <td key={key}>\r\n                          <a href={value} target=\"_blank\">\r\n                            <img src={value} alt={value} className=\"img\" />{\" \"}\r\n                          </a>\r\n                        </td>\r\n                      );\r\n                      // date formatter\r\n                    } else if (statusKey === \"date\") {\r\n                      return (\r\n                        <td key={key}>{moment(value).format(\"MMM DD YYYY\")}</td>\r\n                      );\r\n                      // date and time formatter\r\n                    } else if (\r\n                      moment(value, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid()\r\n                    ) {\r\n                      return (\r\n                        <td key={key}>\r\n                          {moment(value).format(\"MMM DD YYYY hh:mm a\")}\r\n                        </td>\r\n                      );\r\n                    } else if (\r\n                      typeof value === \"string\" &&\r\n                      /<[a-z][\\s\\S]*>/i.test(value)\r\n                    ) {\r\n                      const textOnlyValue = value.replace(/<[^>]+>/g, \"\");\r\n                      return <td key={key}>{textOnlyValue}</td>;\r\n                      // for boolean\r\n                    } else {\r\n                      return (\r\n                        <td key={key}>\r\n                          {typeof value === \"boolean\" ? (\r\n                            value ? (\r\n                              <span style={{ color: \"#1D9E00\" }}>Active</span>\r\n                            ) : (\r\n                              <span style={{ color: \"#DD2025\" }}>Inactive</span>\r\n                            )\r\n                          ) : (\r\n                            value\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    }\r\n                  }\r\n                  return (\r\n                    <td key={key}>\r\n                      {value}\r\n                    </td>\r\n                  );\r\n                })}\r\n\r\n                {(DeleteAction || ReadAction || EditAction) && (\r\n                  <td>\r\n                    <span className=\"actions\">\r\n                      {EditAction && (\r\n                        <img\r\n                          src={editIcon}\r\n                          alt=\"Edit\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            localStorage.removeItem(\"editId\");\r\n                            localStorage.setItem(\"editId\", obj._id);\r\n                            localStorage.removeItem(\"editPage\");\r\n                            localStorage.setItem(\"editPage\", currentPage);\r\n                            history.push(`${editRouteName}`);\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {ReadAction && (\r\n                        <img\r\n                          src={ReadImg}\r\n                          alt=\"read\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            localStorage.removeItem(\"editId\");\r\n                            localStorage.setItem(\"editId\", obj._id);\r\n                            history.push(`${editRouteName}`);\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {DeleteAction && (\r\n                        <img\r\n                          onClick={() => handleOpenModal(obj._id)}\r\n                          src={deleteIcon}\r\n                          alt=\"delete\"\r\n                          style={{\r\n                            color: \"#B4B4B4\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                        />\r\n                      )}\r\n                    </span>\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"my-4\">\r\n        <ReactPaginate\r\n          previousLabel={<FaCaretLeft />}\r\n          nextLabel={<FaCaretRight />}\r\n          pageCount={pageCount}\r\n          onPageChange={handlePageChange}\r\n          forcePage={currentPage - 1}\r\n          containerClassName={\"pagination\"}\r\n          previousClassName={\"pagination-previous\"}\r\n          nextClassName={\"pagination-next\"}\r\n          pageClassName={\"pagination-item\"}\r\n          breakClassName={\"pagination-item\"}\r\n          activeClassName={\"active_page\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableComp;\r\n","module.exports = __webpack_public_path__ + \"static/media/ReadImg.96474dd0.svg\";","module.exports = __webpack_public_path__ + \"static/media/deleteIcon.b8b189cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/editIcon.d54ed3bb.svg\";"],"sourceRoot":""}