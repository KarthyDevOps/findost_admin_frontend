{"version":3,"sources":["component/common/ErrorMessage/index.js","component/Auth/reset password/index.js","component/common/NormalButton/NormalButton.js","component/common/InputBox/InputBox.js","pages/Auth/ResetPassword.js","assets/images/Frame.svg","assets/images/lock.svg"],"names":["FormErrorMessage","_ref","error","type","messages","React","createElement","className","ResetPassword","register","handleSubmit","errors","reset","getValues","useForm","mode","isShowPassword","setIsShowPassword","useState","isShowNewPassword","setIsShowNewPassword","token","URLSearchParams","window","location","search","get","src","login_logo","alt","InputBox","placeholder","Iconic","name","required","minLength","value","maxLength","pattern","validate","lowercase","test","containsDigit","containsSpecial","newPassword","password_icon","AiOutlineEye","onClick","size","color","AiOutlineEyeInvisible","confirmPassword","NormalButton","loginButton1","label","async","body","password","inputs","response","resetPassword","status","Toast","message","data","history","push","loginpage_frame","Component","render","id","addBnt","profileCreatNext","profileCreatNext1","profileCreatBack","uploadBrowseBtn","authButton1","disabled","authButton","loginButton","tableBtn","rightIcon","leftIcon","btnSecondary","profileBtn","outlineBtn","cancel","addProductbtn","isLoading","this","props","concat","Fragment","Oval","height","width","onChange","maxlength","icons","GB","onWheel","grayedBox","Search","ref","defaultValue","event","currentTarget","blur","e","target","autoComplete","BsSearch","style","Reset_Password","localStorage","getItem","Redirect","to","module","exports"],"mappings":"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","file":"static/js/105.3c9dfb68.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FormErrorMessage = ({ error, type, messages }) => {\r\n  if (!error) return null;\r\n\r\n  return (\r\n    <span className=\"text-danger fs-14\">\r\n      {messages[error.type] ? messages[error.type] : \"Error in field\"}\r\n    </span>\r\n  );\r\n};\r\nexport default FormErrorMessage;\r\n","import { useForm } from \"react-hook-form\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\r\n// Styles\r\nimport \"../Login/style.scss\";\r\nimport login_logo from \"../../../assets/images/findostLogo.svg\";\r\nimport password_icon from \"../../../assets/images/lock.svg\";\r\nimport loginpage_frame from \"../../../assets/images/Frame.svg\";\r\n// Internal components\r\nimport FormErrorMessage from \"component/common/ErrorMessage\";\r\nimport NormalButton from \"component/common/NormalButton/NormalButton\";\r\nimport InputBox from \"component/common/InputBox/InputBox\";\r\n// Service\r\nimport { resetPassword } from \"service/Auth\";\r\n// Helpers\r\nimport { history } from \"helpers\";\r\nimport { Toast } from \"service/toast\";\r\n\r\nconst ResetPassword = () => {\r\n  const { register, handleSubmit, errors, reset, getValues } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  const [isShowPassword, setIsShowPassword] = useState(false);\r\n  const [isShowNewPassword, setIsShowNewPassword] = useState(false);\r\n\r\n\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const token = urlParams.get(\"token\");\r\n  // localStorage.setItem(\"token\", token);\r\n\r\n  const onSubmit = async (inputs) => {\r\n    const body = {\r\n      password: inputs.newPassword,\r\n      confirmPassword: inputs.confirmPassword,\r\n    };\r\n    let response = await resetPassword(body, token);\r\n    if (response.status === 200) {\r\n      Toast({ type: \"success\", message: response.data.message });\r\n      reset({ newPassword: \"\", confirmPassword: \"\" });\r\n      history.push(\"/auth/login\");\r\n    } else {\r\n      Toast({ type: \"error\", message: response.data.message });\r\n    }\r\n  };\r\n  return (\r\n    <form>\r\n      <div className=\"\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row \">\r\n            <div className=\" login_filed  col-lg-5 \">\r\n              <div className=\"row page  mt-3\">\r\n                <div className=\"login_logo col-lg-12 \">\r\n                  <img\r\n                    className=\"mx-auto d-block\"\r\n                    src={login_logo}\r\n                    alt=\"\"\r\n                  ></img>\r\n                  <h6 className=\"login \">Reset Password </h6>\r\n                </div>\r\n                <div className=\"newPassword_box mb-3\">\r\n                  <InputBox\r\n                    className=\"login_input\"\r\n                    placeholder=\"New Password\"\r\n                    Iconic\r\n                    errors={errors}\r\n                    type={isShowPassword ? \"text\" : \"password\"}\r\n                    name=\"newPassword\"\r\n                    register={register({\r\n                      required: \"Password is Required\",\r\n                      minLength: {\r\n                        value: 8,\r\n                      },\r\n                      maxLength: {\r\n                        value: 16,\r\n                      },\r\n                      pattern: {\r\n                        value: /^(?=.*[A-Z])/,\r\n                      },\r\n                      validate: {\r\n                        lowercase: (value) =>\r\n                          /^(?=.*[a-z])/.test(value) || \"Password must contain at least one lowercase letter\",\r\n                        containsDigit: (value) =>\r\n                          /^(?=.*[0-9])/.test(value) || \"Password must contain at least one numeric digit\",\r\n                        containsSpecial: (value) =>\r\n                          /^(?=.*[!@#$%^&*])/.test(value) || \"Password must contain at least one special character\",\r\n                      },\r\n                    })}\r\n                  />\r\n\r\n                  <FormErrorMessage\r\n                    error={errors.newPassword}\r\n                    messages={{\r\n                      required: \"Password is Required\",\r\n                      validate: \"Passwords do not match\",\r\n                      minLength: \"Password must contain at least 8 letters\",\r\n                      maxLength: \"Password should contain at most 16 characters\",\r\n                      pattern: \"Password must contain at least one uppercase letter\",\r\n                      lowercase: \"Password must contain at least one lowercase letter\",\r\n                      containsDigit: \"Password must contain at least one Numeric\",\r\n                      containsSpecial: \"Password must contain at least one special character\",\r\n                    }}\r\n                  />\r\n\r\n                  <span className=\"eyeIcons\">\r\n                    <img src={password_icon} alt=\"\"></img>\r\n                  </span>\r\n                  <span className=\"eyeIcons\">\r\n                    {isShowPassword ? (\r\n                      <span className=\"cursor-pointer\">\r\n                        <AiOutlineEye\r\n                          onClick={() => setIsShowPassword(!isShowPassword)}\r\n                          size={25}\r\n                          color=\"#BDBDBD\"\r\n                        />\r\n                      </span>\r\n                    ) : (\r\n                      <span className=\"cursor-pointer\">\r\n                        <AiOutlineEyeInvisible\r\n                          onClick={() => setIsShowPassword(!isShowPassword)}\r\n                          size={25}\r\n                          color=\"#BDBDBD\"\r\n                        />\r\n                      </span>\r\n                    )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"newPassword_box my-3\">\r\n                  <InputBox\r\n                    className=\"login_input \"\r\n                    placeholder=\"Confirm Password\"\r\n                    Iconic\r\n                    errors={errors}\r\n                    type={isShowNewPassword ? \"text\" : \"password\"}\r\n                    name=\"confirmPassword\"\r\n                    register={register({\r\n                      required: \"Password is required\",\r\n                      minLength: {\r\n                        value: 8,\r\n                      },\r\n                      maxLength: {\r\n                        value: 16,\r\n                      },\r\n                      pattern: {\r\n                        value: /^(?=.*[A-Z])/,\r\n                        lowercase: (value) =>\r\n                          /^(?=.*[a-z])/.test(value) || \"Password must contain at least one lowercase letter\",\r\n                        containsDigit: (value) =>\r\n                          /^(?=.*[0-9])/.test(value) ||\r\n                          \"Password must contain at least one Numeric\",\r\n                        containsSpecial: (value) =>\r\n                          /^(?=.*[!@#$%^&*])/.test(value) ||\r\n                          \"Password must contain at least one special character\",\r\n                      },\r\n                      validate: (value) => {\r\n                        const { newPassword } = getValues();\r\n                        return newPassword === value;\r\n                      },\r\n                    })}\r\n                  />\r\n                  <FormErrorMessage\r\n                    error={errors.confirmPassword}\r\n                    messages={{\r\n                      required: \"Password is Required\",\r\n                      validate: \"Passwords do not match\",\r\n                      minLength: \"Password must contain atleast 8 letters\",\r\n                      maxLength: \"Password should must contain only 16\",\r\n                      pattern: \"Password must contain at least one uppercase letter\",\r\n                      lowercase: \"Password must contain at least one lowercase letter\",\r\n                      containsDigit: \"Password must contain at least one Numeric\",\r\n                      containsSpecial:\r\n                        \"Password must contain at least one special character\",\r\n                    }}\r\n                  />\r\n                  <span className=\"eyeIcons\">\r\n                    <img src={password_icon} alt=\"\"></img>\r\n                  </span>\r\n                  <span className=\"eyeIcons\">\r\n                    {isShowNewPassword ? (\r\n                      <span className=\"cursor-pointer\">\r\n                        <AiOutlineEye\r\n                          onClick={() => setIsShowNewPassword(!isShowNewPassword)}\r\n                          size={25}\r\n                          color=\"#BDBDBD\"\r\n                        />\r\n                      </span>\r\n                    ) : (\r\n                      <span className=\"cursor-pointer\">\r\n                        <AiOutlineEyeInvisible\r\n                          onClick={() => setIsShowNewPassword(!isShowNewPassword)}\r\n                          size={25}\r\n                          color=\"#BDBDBD\"\r\n                        />\r\n                      </span>\r\n                    )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"forget \">\r\n                  <div className=\"login_btn  mt-4\">\r\n                    <NormalButton\r\n                      loginButton1\r\n                      label=\"Confirm\"\r\n                      onClick={handleSubmit(onSubmit)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"login_frame ms-4 ps-5  col-lg-7\">\r\n              <div className=\"clip\"></div>\r\n              <div className=\"bg_slide\">\r\n                <img\r\n                  className=\" d-block mx-auto\"\r\n                  src={loginpage_frame}\r\n                  alt=\"\"\r\n                ></img>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React, { Component } from \"react\";\r\nimport { Oval } from \"react-loader-spinner\";\r\n// import styles from \"./button.module.scss\";\r\nimport \"./normalButton.scss\";\r\n\r\nexport class NormalButton extends Component {\r\n  render() {\r\n    const {\r\n      className = \"\",\r\n      label = \"\",\r\n      onClick,\r\n      id,\r\n      addBnt,\r\n      profileCreatNext,\r\n      profileCreatNext1,\r\n      profileCreatBack,\r\n      uploadBrowseBtn,\r\n      authButton1,\r\n      type = \"submit\",\r\n      disabled = false,\r\n      authButton = false,\r\n      loginButton = false,\r\n      loginButton1 = false,\r\n      tableBtn = false,\r\n      rightIcon = \"\",\r\n      leftIcon = \"\",\r\n      btnSecondary = false,\r\n      profileBtn = false,\r\n      outlineBtn = false,\r\n      cancel = false,\r\n      addProductbtn = false,\r\n      isLoading = false, // Add isLoading prop for button loader\r\n    } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <button\r\n          id={id}\r\n          type={type}\r\n          className={`cursor-pointer \r\n                     ${authButton ? \"authButton\" : \"\"}\r\n                     ${profileCreatNext ? \"profileCreatNext\" : \"\"}\r\n                     ${profileCreatNext1 ? \"profileCreatNext1\" : \"\"}\r\n                     ${authButton1 ? \"authButton1\" : \"\"}\r\n                     ${profileCreatBack ? \"profileCreatBack\" : \"\"}\r\n                     ${loginButton ? \"loginButton\" : \"\"}\r\n                     ${loginButton1 ? \"loginButton1\" : \"\"}\r\n                     ${addBnt ? \"addBnt\" : \"\"}\r\n                     ${tableBtn ? \"tableBtn\" : \"\"}\r\n                     ${btnSecondary ? \"btnSecondary\" : \"\"}\r\n                     ${profileBtn ? \"profileBtn\" : \"\"}\r\n                     ${outlineBtn ? \"outlineBtn\" : \"\"}\r\n                     ${cancel ? \"cancelBtn \" : \"\"}\r\n                     ${addProductbtn ? \"addProductbtn \" : \"\"}\r\n                     ${uploadBrowseBtn ? \"uploadBrowseBtn \" : \"\"}\r\n                     ${className}`}\r\n          onClick={onClick}\r\n          disabled={disabled || isLoading}\r\n        >\r\n          {isLoading ? (\r\n            <span className=\"btn-loader  \">\r\n              {\" \"}\r\n              <>\r\n                <Oval color=\"#ffffff\" height={20} width={\"100%\"} />\r\n              </>\r\n              <>\r\n                <span className=\"m-3\">Loading</span>{\" \"}\r\n              </>\r\n            </span>\r\n          ) : (\r\n            <>\r\n              {leftIcon !== \"\" ? (\r\n                <span className={`btn-left-icon ${leftIcon}`}></span>\r\n              ) : null}\r\n              {label}\r\n              {rightIcon !== \"\" ? (\r\n                <span className={`btn-right-icon ${rightIcon}`}></span>\r\n              ) : null}\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NormalButton;\r\n","import React from \"react\";\r\nimport { BsSearch } from \"react-icons/bs\"\r\nimport \"./InputBox.scss\";\r\nconst InputBox = (props) => {\r\n  let {\r\n    placeholder = \"\",\r\n    register = {},\r\n    value = \"\",\r\n    type = \"text\",\r\n    onChange,\r\n    name = \"\",\r\n    maxlength = \"\",\r\n    icons = false,\r\n    GB = false,\r\n    onWheel = \"\",\r\n    grayedBox = false,\r\n    Iconic = false,\r\n    disabled = false,\r\n    maxLength,\r\n    Search = false,\r\n  } = props;\r\n  return (\r\n    <>\r\n      <div className=\"input_head\">\r\n        <input\r\n          disabled={disabled}\r\n          name={name}\r\n          placeholder={placeholder}\r\n          className={\r\n            disabled ? \"inputBoxGrayed\" :\r\n              grayedBox\r\n                ? \"inputBoxGrayed\"\r\n                : Iconic\r\n                  ? \"inputBoxStyle1\"\r\n                  : \"inputBoxStyle\"\r\n          }\r\n          ref={register}\r\n          defaultValue={value}\r\n          type={type}\r\n          maxLength={maxLength}\r\n          onWheel={(event) => event.currentTarget.blur()}\r\n          onChange={(e) => {\r\n            const body = {\r\n              target: {\r\n                name: e.target.name,\r\n                value: e.target.value,\r\n              },\r\n            };\r\n            if (onChange) onChange(body);\r\n          }}\r\n          autoComplete={\"off\"}\r\n        />\r\n        {Iconic && Search ? <i className=\"search_icon\"><BsSearch size={18} style={{ color: \"#7E7E7E\" }} /></i> : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputBox;\r\n","import React from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport ResetPassword from \"component/Auth/reset password\";\r\n\r\nconst Reset_Password = () => {\r\n\r\n  if (localStorage.getItem('token')) return <Redirect to={'/admin'} />;\r\n\r\n  return (\r\n    <div>\r\n      <ResetPassword />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reset_Password;","module.exports = __webpack_public_path__ + \"static/media/Frame.5d9e13ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/lock.1575ae5e.svg\";"],"sourceRoot":""}