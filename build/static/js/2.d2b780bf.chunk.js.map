{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","onBlur","onChange","meta","invalid","props","as","render","rest","componentProps","React.cloneElement","React.createElement","_toConsumableArray","arr","arrayLikeToArray","iter","from"],"mappings":"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","file":"static/js/2.d2b780bf.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}