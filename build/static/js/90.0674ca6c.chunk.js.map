{"version":3,"sources":["component/Auth/Forgetpassword/index.js","component/Auth/reset password/index.js","pages/Auth/ResetPassword.js"],"names":["i","Forgetpassword","useForm","mode","register","handleSubmit","errors","reset","onSubmit","setError","inputs","body","email","emailId","forgotPassword","response","status","Toast","type","message","data","className","src","login_logo","alt","placeholder","Iconic","name","required","pattern","error","messages","username_icon","onClick","history","push","loginButton","label","loginpage_frame","ResetPassword","getValues","token","URLSearchParams","window","location","search","get","localStorage","setItem","password","newPassword","confirmPassword","resetPassword","minLength","maxLength","password_icon","validate","value","Reset_Password","getItem","to"],"mappings":"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","file":"static/js/90.0674ca6c.chunk.js","sourcesContent":["import { useForm } from \"react-hook-form\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Toast } from \"service/toast\";\r\n// Styles\r\nimport \"../Login/style.scss\";\r\nimport username_icon from \"../../../assets/images/user.svg\";\r\nimport login_logo from \"../../../assets/images/findostLogo.svg\";\r\nimport loginpage_frame from \"../../../assets/images/Frame.svg\";\r\n// Internal components\r\nimport FormErrorMessage from \"component/common/ErrorMessage\";\r\nimport NormalButton from \"component/common/NormalButton/NormalButton\";\r\n// Service\r\nimport { forgotPassword } from \"service/Auth\";\r\n// Helpers\r\nimport { history } from \"helpers\";\r\nimport InputBox from \"component/common/InputBox/InputBox\";\r\n\r\nconst Forgetpassword = () => {\r\n  const { register, handleSubmit, errors, reset, setError } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onSubmit = async (inputs) => {\r\n    const body = {\r\n      email: inputs.emailId,\r\n    };\r\n    let response = await forgotPassword(body);\r\n    if (response.status === 200) {\r\n      Toast({ type: \"success\", message: response.data.message });\r\n      reset({ emailId: \"\" });\r\n     \r\n    } else {\r\n      Toast({ type: \"error\", message: response.data.message });\r\n    }\r\n  };\r\n  return (\r\n    <form>\r\n      <div className=\"login_page\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row \">\r\n            <div className=\" login_filed col-lg-5 \">\r\n              <div className=\"row page  mt-3\">\r\n                <div className=\"login_logo col-lg-12 \">\r\n                  <img\r\n                    className=\"mx-auto d-block\"\r\n                    src={login_logo}\r\n                    alt=\"\"\r\n                  ></img>\r\n                  <h6 className=\"login \">Forgot password</h6>\r\n                  <p className=\"text-center\">\r\n                    Please provide registed email id to send reset link\r\n                  </p>\r\n                </div>\r\n                <div className=\"userbox\">\r\n                  <InputBox\r\n                    className=\"login_input\"\r\n                    placeholder=\"Email Id\"\r\n                    Iconic\r\n                    errors={errors}\r\n                    name=\"emailId\"\r\n                    register={register({\r\n                      required: true,\r\n                      pattern: /\\S+@\\S+\\.\\S+/,\r\n                    })}\r\n                  />\r\n                  <FormErrorMessage\r\n                    error={errors.emailId}\r\n                    messages={{\r\n                      required: \"Email Id is required\",\r\n                      pattern: \"Invalid Email Id\",\r\n                    }}\r\n                  />\r\n                  <span className=\"userbox_icon\">\r\n                    <img src={username_icon} alt=\"\"></img>\r\n                  </span>\r\n                </div>\r\n                <div className=\"forget \">\r\n                  <span\r\n                    onClick={() => history.push(\"/auth/resetpassword\")}\r\n                    className=\"forget cursor-pointer\"\r\n                  >\r\n                    Login Instead\r\n                  </span>\r\n                  <div className=\"login_btn  mt-3\">\r\n                    <NormalButton\r\n                      loginButton\r\n                      label=\"Send Reset Link\"\r\n                      onClick={handleSubmit(onSubmit)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"login_frame ms-4 ps-5  col-lg-7\">\r\n              <div className=\"clip\"></div>\r\n              <div className=\"bg_slide\">\r\n                <img\r\n                  className=\" d-block mx-auto\"\r\n                  src={loginpage_frame}\r\n                  alt=\"\"\r\n                ></img>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Forgetpassword;\r\n","import { useForm } from \"react-hook-form\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Toast } from \"service/toast\";\r\n// Styles\r\nimport \"../Login/style.scss\";\r\nimport login_logo from \"../../../assets/images/findostLogo.svg\";\r\nimport password_icon from \"../../../assets/images/lock.svg\";\r\nimport loginpage_frame from \"../../../assets/images/Frame.svg\";\r\n// Internal components\r\nimport FormErrorMessage from \"component/common/ErrorMessage\";\r\nimport NormalButton from \"component/common/NormalButton/NormalButton\";\r\n// Service\r\nimport { resetPassword } from \"service/Auth\";\r\n// Helpers\r\nimport { history } from \"helpers\";\r\nimport InputBox from \"component/common/InputBox/InputBox\";\r\n\r\nconst ResetPassword = () => {\r\n  const { register, handleSubmit, errors, reset, getValues } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const token = urlParams.get(\"token\");\r\n  localStorage.setItem(\"token\", token);\r\n\r\n  const onSubmit = async (inputs) => {\r\n    const body = {\r\n      password: inputs.newPassword,\r\n      confirmPassword: inputs.confirmPassword,\r\n    };\r\n    let response = await resetPassword(body);\r\n    if (response.status === 200) {\r\n      Toast({ type: \"success\", message: response.data.message });\r\n      reset({ newPassword: \"\", confirmPassword: \"\" });\r\n      history.push(\"/admin/dashboard\");\r\n    } else {\r\n      Toast({ type: \"error\", message: response.data.message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row \">\r\n            <div className=\" login_filed  col-lg-5 \">\r\n              <div className=\"row page  mt-3\">\r\n                <div className=\"login_logo col-lg-12 \">\r\n                  <img\r\n                    className=\"mx-auto d-block\"\r\n                    src={login_logo}\r\n                    alt=\"\"\r\n                  ></img>\r\n                  <h6 className=\"login \">Reset Password </h6>\r\n                </div>\r\n                <div className=\"newPassword_box mb-3\">\r\n                  <InputBox\r\n                    className=\"login_input \"\r\n                    placeholder=\"New Password\"\r\n                    Iconic\r\n                    errors={errors}\r\n                    type={\"password\"}\r\n                    name=\"newPassword\"\r\n                    register={register({\r\n                      required: true,\r\n                      minLength: 8,\r\n                      maxLength: 16,\r\n                      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?& ]{8,}$/s,\r\n                    })}\r\n                  />\r\n                  <FormErrorMessage\r\n                    error={errors.newPassword}\r\n                    messages={{\r\n                      required: \"Password is required\",\r\n                      minLength: \"Password must contain atleast 8 letters\",\r\n                      maxLength: \"Password should must contain only 16\",\r\n                      pattern: \"Password must contain a special character\",\r\n                    }}\r\n                  />\r\n                  <span className=\"newpassword_icon\">\r\n                    <img src={password_icon} alt=\"\"></img>\r\n                  </span>\r\n                </div>\r\n                <div className=\"newPassword_box my-3\">\r\n                  <InputBox\r\n                    className=\"login_input \"\r\n                    placeholder=\"Confirm Password\"\r\n                    Iconic\r\n                    errors={errors}\r\n                    type={\"password\"}\r\n                    name=\"confirmPassword\"\r\n                    register={register({\r\n                      required: true,\r\n                      minLength: 8,\r\n                      maxLength: 16,\r\n                      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?& ]{8,}$/s,\r\n                      validate: (value) => {\r\n                        const { newPassword } = getValues();\r\n                        return newPassword === value;\r\n                      },\r\n                    })}\r\n                  />\r\n                  <FormErrorMessage\r\n                    error={errors.confirmPassword}\r\n                    messages={{\r\n                      required: \"Password is required\",\r\n                      validate: \"Passwords do not match\",\r\n                      minLength: \"Password must contain atleast 8 letters\",\r\n                      maxLength: \"Password should must contain only 16\",\r\n                      pattern: \"Password must contain a special character\",\r\n                    }}\r\n                  />\r\n                  <span className=\"newpassword_icon\">\r\n                    <img src={password_icon} alt=\"\"></img>\r\n                  </span>\r\n                </div>\r\n                <div className=\"forget \">\r\n                  <div className=\"login_btn  mt-4\">\r\n                    <NormalButton\r\n                      loginButton\r\n                      label=\"confirm\"\r\n                      onClick={handleSubmit(onSubmit)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"login_frame ms-4 ps-5  col-lg-7\">\r\n              <div className=\"clip\"></div>\r\n              <div className=\"bg_slide\">\r\n                <img\r\n                  className=\" d-block mx-auto\"\r\n                  src={loginpage_frame}\r\n                  alt=\"\"\r\n                ></img>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport ResetPassword from \"component/Auth/reset password\";\r\nimport LoginComp from \"component/Auth/Login\";\r\nimport Forgetpassword from 'component/Auth/Forgetpassword'\r\nconst Reset_Password = () => {\r\n\r\n  if (localStorage.getItem('token')) return <Redirect to={'/admin'} />;\r\n\r\n  return (\r\n    <div>\r\n      <ResetPassword/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reset_Password;"],"sourceRoot":""}